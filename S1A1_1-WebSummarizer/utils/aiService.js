// AI Service Manager for Web Content Summarizer
class AIServiceManager {
    constructor() {
        this.init();
    }

    init() {
        this.providers = {
            openai: this.openaiService,
            claude: this.claudeService,
            gemini: this.geminiService,
            local: this.localService
        };
        
        this.defaultProvider = 'local';
        this.apiConfig = null;
    }

    /**
     * Initialize AI service with configuration
     * @param {Object} config - API configuration
     */
    async initialize(config) {
        this.apiConfig = config;
        console.log('AI Service initialized with provider:', config.provider);
    }

    /**
     * Generate AI-powered summary
     * @param {string} text - Text to summarize
     * @param {string} length - Summary length preference
     * @param {string} provider - AI provider to use
     * @returns {Promise<string>} - AI-generated summary
     */
    async generateAISummary(text, length = 'medium', provider = null) {
        try {
            if (!text || text.trim().length === 0) {
                throw new Error('No text provided for summarization');
            }

            // Determine which provider to use
            const selectedProvider = provider || this.apiConfig?.provider || this.defaultProvider;
            
            // Get the appropriate service function
            const serviceFunction = this.providers[selectedProvider];
            if (!serviceFunction) {
                throw new Error(`Unknown AI provider: ${selectedProvider}`);
            }

            // Generate summary using selected provider
            const summary = await serviceFunction.call(this, text, length);
            
            return summary;
            
        } catch (error) {
            console.error('AI summary generation failed:', error);
            
            // Fallback to local summarization
            console.log('Falling back to local summarization');
            return this.localService(text, length);
        }
    }

    /**
     * OpenAI GPT service for summarization
     * @param {string} text - Text to summarize
     * @param {string} length - Summary length
     * @returns {Promise<string>} - OpenAI-generated summary
     */
    async openaiService(text, length) {
        if (!this.apiConfig?.openaiApiKey) {
            throw new Error('OpenAI API key not configured');
        }

        try {
            const prompt = this.createOpenAIPrompt(text, length);
            
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.apiConfig.openaiApiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        {
                            role: 'system',
                            content: 'You are a helpful assistant that creates concise, accurate summaries of web content.'
                        },
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: this.getMaxTokens(length),
                    temperature: 0.3,
                    top_p: 1,
                    frequency_penalty: 0,
                    presence_penalty: 0
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);
            }

            const data = await response.json();
            const summary = data.choices[0]?.message?.content?.trim();
            
            if (!summary) {
                throw new Error('No summary generated by OpenAI');
            }

            return summary;

        } catch (error) {
            console.error('OpenAI service error:', error);
            throw new Error(`OpenAI summarization failed: ${error.message}`);
        }
    }

    /**
     * Claude service for summarization
     * @param {string} text - Text to summarize
     * @param {string} length - Summary length
     * @returns {Promise<string>} - Claude-generated summary
     */
    async claudeService(text, length) {
        if (!this.apiConfig?.claudeApiKey) {
            throw new Error('Claude API key not configured');
        }

        try {
            const prompt = this.createClaudePrompt(text, length);
            
            const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.apiConfig.claudeApiKey,
                    'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                    model: 'claude-3-haiku-20240307',
                    max_tokens: this.getMaxTokens(length),
                    messages: [
                        {
                            role: 'user',
                            content: prompt
                        }
                    ]
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Claude API error: ${errorData.error?.message || response.statusText}`);
            }

            const data = await response.json();
            const summary = data.content[0]?.text?.trim();
            
            if (!summary) {
                throw new Error('No summary generated by Claude');
            }

            return summary;

        } catch (error) {
            console.error('Claude service error:', error);
            throw new Error(`Claude summarization failed: ${error.message}`);
        }
    }

    /**
     * Google Gemini service for summarization
     * @param {string} text - Text to summarize
     * @param {string} length - Summary length
     * @returns {Promise<string>} - Gemini-generated summary
     */
    async geminiService(text, length) {
        if (!this.apiConfig?.geminiApiKey) {
            throw new Error('Gemini API key not configured');
        }

        try {
            const prompt = this.createGeminiPrompt(text, length);
            
            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${this.apiConfig.geminiApiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    contents: [
                        {
                            parts: [
                                {
                                    text: prompt
                                }
                            ]
                        }
                    ],
                    generationConfig: {
                        maxOutputTokens: this.getMaxTokens(length),
                        temperature: 0.3,
                        topP: 1,
                        topK: 1
                    }
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Gemini API error: ${errorData.error?.message || response.statusText}`);
            }

            const data = await response.json();
            const summary = data.candidates[0]?.content?.parts[0]?.text?.trim();
            
            if (!summary) {
                throw new Error('No summary generated by Gemini');
            }

            return summary;

        } catch (error) {
            console.error('Gemini service error:', error);
            throw new Error(`Gemini summarization failed: ${error.message}`);
        }
    }

    /**
     * Local summarization service (fallback)
     * @param {string} text - Text to summarize
     * @param {string} length - Summary length
     * @returns {string} - Locally generated summary
     */
    localService(text, length) {
        // Use the existing summarizer utility
        const summarizer = new Summarizer();
        return summarizer.generateSummary(text, length, 'extractive');
    }

    /**
     * Create OpenAI prompt for summarization
     * @param {string} text - Text to summarize
     * @param {string} length - Desired length
     * @returns {string} - Formatted prompt
     */
    createOpenAIPrompt(text, length) {
        const lengthInstructions = {
            short: 'Create a very brief summary in 1-2 sentences',
            medium: 'Create a concise summary in 3-4 sentences',
            long: 'Create a comprehensive summary in 5-7 sentences'
        };

        return `Please summarize the following text. ${lengthInstructions[length] || lengthInstructions.medium}

Text to summarize:
${text}

Summary:`;
    }

    /**
     * Create Claude prompt for summarization
     * @param {string} text - Text to summarize
     * @param {string} length - Desired length
     * @returns {string} - Formatted prompt
     */
    createClaudePrompt(text, length) {
        const lengthInstructions = {
            short: 'Create a very brief summary in 1-2 sentences',
            medium: 'Create a concise summary in 3-4 sentences',
            long: 'Create a comprehensive summary in 5-7 sentences'
        };

        return `Please summarize the following text. ${lengthInstructions[length] || lengthInstructions.medium}

Text to summarize:
${text}

Summary:`;
    }

    /**
     * Create Gemini prompt for summarization
     * @param {string} text - Text to summarize
     * @param {string} length - Desired length
     * @returns {string} - Formatted prompt
     */
    createGeminiPrompt(text, length) {
        const lengthInstructions = {
            short: 'Create a very brief summary in 1-2 sentences',
            medium: 'Create a concise summary in 3-4 sentences',
            long: 'Create a comprehensive summary in 5-7 sentences'
        };

        return `Please summarize the following text. ${lengthInstructions[length] || lengthInstructions.medium}

Text to summarize:
${text}

Summary:`;
    }

    /**
     * Get maximum tokens based on length preference
     * @param {string} length - Summary length
     * @returns {number} - Maximum tokens
     */
    getMaxTokens(length) {
        switch (length) {
            case 'short':
                return 150;
            case 'long':
                return 400;
            case 'medium':
            default:
                return 250;
        }
    }

    /**
     * Test API connection
     * @param {string} provider - Provider to test
     * @param {string} apiKey - API key for testing
     * @returns {Promise<Object>} - Test result
     */
    async testAPIConnection(provider, apiKey) {
        try {
            const testText = 'This is a test text for API connection testing.';
            
            // Temporarily set the API key for testing
            const originalConfig = { ...this.apiConfig };
            this.apiConfig = { ...this.apiConfig, [`${provider}ApiKey`]: apiKey, provider };
            
            // Try to generate a summary
            const summary = await this.generateAISummary(testText, 'short', provider);
            
            // Restore original config
            this.apiConfig = originalConfig;
            
            return {
                success: true,
                message: 'API connection successful',
                summary: summary,
                provider: provider
            };
            
        } catch (error) {
            return {
                success: false,
                message: `API connection failed: ${error.message}`,
                provider: provider
            };
        }
    }

    /**
     * Get available providers
     * @returns {Array} - List of available providers
     */
    getAvailableProviders() {
        return Object.keys(this.providers);
    }

    /**
     * Check if provider is configured
     * @param {string} provider - Provider to check
     * @returns {boolean} - Whether provider is configured
     */
    isProviderConfigured(provider) {
        if (provider === 'local') return true;
        
        const apiKeyField = `${provider}ApiKey`;
        return !!(this.apiConfig && this.apiConfig[apiKeyField]);
    }

    /**
     * Get provider status
     * @returns {Object} - Status of all providers
     */
    getProviderStatus() {
        const status = {};
        
        Object.keys(this.providers).forEach(provider => {
            status[provider] = {
                available: true,
                configured: this.isProviderConfigured(provider),
                name: this.getProviderDisplayName(provider)
            };
        });
        
        return status;
    }

    /**
     * Get display name for provider
     * @param {string} provider - Provider key
     * @returns {string} - Display name
     */
    getProviderDisplayName(provider) {
        const names = {
            openai: 'OpenAI GPT',
            claude: 'Claude AI',
            gemini: 'Google Gemini',
            local: 'Local Processing'
        };
        
        return names[provider] || provider;
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIServiceManager;
} else if (typeof window !== 'undefined') {
    window.AIServiceManager = AIServiceManager;
}
